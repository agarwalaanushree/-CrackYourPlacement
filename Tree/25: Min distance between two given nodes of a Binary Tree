Qn: https://www.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1

class Solution{
    public:
    
    int findLevel(Node* root,int k,int level)
    {
        if(root==NULL)
        return -1;
        
        if(root->data==k)
        return level;
        
        int l=findLevel(root->left,k,level+1);
        return (l!=-1)? l: findLevel(root->right,k,level+1);
    }
    Node* func(Node* root,int a,int b,int& d1,int& d2,int& dist,int lvl)
    {
        if(root==NULL)
        return NULL;
        
        if(root->data==a){
            d1=lvl;
            return root;
        }
        
        if(root->data==b){
            d2=lvl;
            return root;
        }
        
        Node* left_lca=func(root->left,a,b,d1,d2,dist,lvl+1);
        Node* right_lca=func(root->right,a,b,d1,d2,dist,lvl+1);
        
        if(left_lca && right_lca)
        {
            dist=d1+d2-2*lvl;
            return root;
        }
        
        return (left_lca!=NULL) ? left_lca:right_lca;
    }
    /* Should return minimum distance between a and b
    in a tree with given root*/
    int findDist(Node* root, int a, int b) {
        // Your code here
        int d1=-1,d2=-1,dist;
        Node* lca=func(root,a,b,d1,d2,dist,1);
        if(d1!=-1 && d2!=-1)
        return dist;
        
        if(d1!=-1){
            dist=findLevel(lca,b,0);
            return dist;
        }
        if(d2!=-1){
            dist=findLevel(lca,a,0);
            return dist;
        }
        
        return -1;
    }
};
