Qn: https://www.geeksforgeeks.org/problems/largest-bst/1

class NodeValue{
    public:
    int maxNode,minNode,maxSize;
    
    NodeValue(int minNode,int maxNode,int maxSize){
        this->maxNode=maxNode;
        this->minNode=minNode;
        this->maxSize=maxSize;
    }
};
class Solution{
    public:
    
    NodeValue largestBstfunc(Node* root)
    {
        if(!root){
            return NodeValue(INT_MAX,INT_MIN,0);
        }
        
        auto left=largestBstfunc(root->left);
        auto right=largestBstfunc(root->right);
        
        if(left.maxNode<root->data && root->data<right.minNode){
            return NodeValue(min(root->data,left.minNode),max(root->data,right.maxNode),
            left.maxSize+right.maxSize+1);
        }
        
        return NodeValue(INT_MIN,INT_MAX,max(left.maxSize,right.maxSize));
    }
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	//Your code here
    	return largestBstfunc(root).maxSize;
    }
};
