Qn: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,vector<int>>> mp;
        queue<pair<TreeNode*,pair<int,int>>> q;
        vector<vector<int>> ans;
        if(root==NULL)
        return ans;

        q.push(make_pair(root,make_pair(0,0)));
        while(!q.empty())
        {
            pair<TreeNode*,pair<int,int>> temp=q.front();
            q.pop();
            TreeNode* tempNode=temp.first;
            int hd=temp.second.first;
            int lvl=temp.second.second;
            mp[hd][lvl].push_back(tempNode->val);
            if(tempNode->left)
            q.push(make_pair(tempNode->left,make_pair(hd-1,lvl+1)));
            if(tempNode->right)
            q.push(make_pair(tempNode->right,make_pair(hd+1,lvl+1)));
        }

        for(auto i:mp)
        {
            vector<int> res;
            for(auto j:i.second)
            {
                vector<int> vec=j.second;
                sort(vec.begin(),vec.end());
                res.insert(res.end(),vec.begin(),vec.end());
            }
            ans.push_back(res);
        }
        return ans;
    }
};
