Qn: https://leetcode.com/problems/balanced-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
pair<bool,int> func(TreeNode* root)
{
    if(root==NULL){
        pair<bool,int> p=make_pair(true,0);
        return p;
    }

    pair<bool,int> left=func(root->left);
    pair<bool,int> right=func(root->right);

    bool left1=left.first;
    bool right1=right.first;

    bool diff=abs(left.second-right.second)<=1;
    pair<bool,int> ans;
    ans.second=max(left.second,right.second)+1;
    if(left1 && right1 && diff)
    ans.first=true;
    else
    ans.second=false;

    return ans;
}
    bool isBalanced(TreeNode* root) {
        return func(root).first;
    }
};
