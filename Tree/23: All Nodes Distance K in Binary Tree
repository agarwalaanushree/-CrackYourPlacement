Qn: https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

void func(TreeNode* node,TreeNode* parent,unordered_map<TreeNode*,TreeNode*>& mp)
{
    if(node==NULL)
    return;

    mp[node]=parent;
    func(node->left,node,mp);
    func(node->right,node,mp);
}
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> mp;
        func(root,nullptr,mp);

        queue<TreeNode*> q;
        unordered_set<TreeNode*> visited;
        q.push(target);
        visited.insert(target);

        int d=0;
        while(!q.empty())
        {
            if(d==k){
                vector<int> ans;
                while(!q.empty()){
                    ans.push_back(q.front()->val);
                    q.pop();
                }
                return ans;
            }

            int n=q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* node=q.front();
                q.pop();

                if(node->left && !visited.count(node->left)){
                    q.push(node->left);
                    visited.insert(node->left);
                }
                if(node->right && !visited.count(node->right)){
                    q.push(node->right);
                    visited.insert(node->right);
                }
                if(mp[node] && !visited.count(mp[node])){
                    q.push(mp[node]);
                    visited.insert(mp[node]);
                }
            }
            d++;
        }
        return {};
    }
    
};
