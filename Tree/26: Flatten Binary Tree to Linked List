Qn: https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void preOrder(TreeNode* root,vector<TreeNode*>& vec)
{
    if(root==NULL)
    return;

    vec.push_back(root);
    preOrder(root->left,vec);
    preOrder(root->right,vec);
}
    void flatten(TreeNode* root) {
        if(root==NULL)
        return;
        vector<TreeNode*> vec;
        preOrder(root,vec);
        for(int i=1;i<vec.size();i++)
        {
            root->left=nullptr;
            root->right=vec[i];
            root=root->right;
        }
    }
};
