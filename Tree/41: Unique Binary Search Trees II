Qn: https://leetcode.com/problems/unique-binary-search-trees-ii/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

vector<TreeNode*> func(int st,int end)
{
    vector<TreeNode*> res;
    if(st>end){
        res.push_back(NULL);
        return res;
    }
    for(int i=st;i<=end;i++)
    {
        vector<TreeNode*> leftSubtree=func(st,i-1);
        vector<TreeNode*> rightSubtree=func(i+1,end);

        for(int j=0;j<leftSubtree.size();j++){
            TreeNode* left=leftSubtree[j];
            for(int k=0;k<rightSubtree.size();k++)
            {
                TreeNode* right=rightSubtree[k];
                TreeNode* node=new TreeNode(i);
                node->left=left;
                node->right=right;
                res.push_back(node);
            }
        }
    }
    return res;
}
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> ans=func(1,n);

        return ans;
    }
};
