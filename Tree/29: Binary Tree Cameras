Qn: https://leetcode.com/problems/binary-tree-cameras/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int no_camera=0;
int has_camera=2;
int not_needed=1;
int ans=0;
int func(TreeNode* root)
{
    if(root==NULL)
    {
        return not_needed;
    }
    int l=func(root->left);
    int r=func(root->right);
    if(l==no_camera || r==no_camera)
    {
        ans++;
        return has_camera;
    }
    else if(l==has_camera || r==has_camera){
        return not_needed;
    }
    else
    return no_camera;
}
    int minCameraCover(TreeNode* root) {
        if(func(root)==no_camera) 
        ans++;
        return ans;
    }
};
