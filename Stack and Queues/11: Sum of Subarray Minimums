Qn: https://leetcode.com/problems/sum-of-subarray-minimums/description/

class Solution {
public:
vector<int> findnse(vector<int>& arr)
{
    int n=arr.size();
    stack<int> st;
    vector<int> nse(n);
    for(int i=n-1;i>=0;i--)
    {
        while(!st.empty() && arr[st.top()]>=arr[i])
        st.pop();
        
        nse[i]=st.empty()?n:st.top();
        st.push(i);
    }
   // reverse(nse.begin(),nse.end());
    return nse;
}

vector<int> findpse(vector<int>& arr)
{
    int n=arr.size();
    stack<int> st;
    vector<int> pse(n);
    for(int i=0;i<n;i++)
    {
        while(!st.empty() && arr[st.top()]>arr[i])
        st.pop();
        
        pse[i]=st.empty()?-1:st.top();
        st.push(i);
    }
  //  reverse(pse.begin(),pse.end());
    return pse;
}

    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int> nse=findnse(arr);
        vector<int> psee=findpse(arr);
        int ans=0;
        int mod=1e9+7;
        for(int i=0;i<n;i++)
        {
            int l=i-psee[i];
            int r=nse[i]-i;

            ans = (ans + (l * r % mod) * 1LL * arr[i] % mod) % mod;
        }

        return ans;
    }
};
