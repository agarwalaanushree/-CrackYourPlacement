Qn: https://www.geeksforgeeks.org/problems/subtraction-in-linked-list/1

class Solution {
public:
int length(Node* n) {
        int ret = 0;
        while (n) {
            ret++;
            n = n->next;
        }
        return ret;
    }

    Node* reverse(Node* head) {
        Node* prev =  NULL;
        Node* current = head;
        Node* next =  NULL;

        while (current !=  NULL) {
            next = current->next; // storing next node
            current->next = prev; // linking current node to previous
            prev = current; // updating prev
            current = next; // updating current
        }

        return prev;
    }
    Node* subLinkedList(Node* head1, Node* head2) {
        // Your implementation of subLinkedList goes here
        // Make sure to return the head of the resulting linked list
        
        while(head1!=NULL && head1->data==0)
        head1=head1->next;
        
        while(head2!=NULL && head2->data==0)
        head2=head2->next;
        
        int n1=length(head1);
        int n2=length(head2);
        
        if(n1==0 && n2==0)
        return new Node(0);
        
        if(n2>n1)
        swap(head1,head2);
        
        if(n1==n2){
            Node* temp1=head1;
            Node* temp2=head2;
            while(temp1->data==temp2->data){
                temp1=temp1->next;
                temp2=temp2->next;
                
                if(temp1==NULL)
                return new Node(0);
            }
            
            if(temp2->data>temp1->data)
            swap(head1,head2);
        }
        
        head1=reverse(head1);
        head2=reverse(head2);
        
        Node* ans=NULL;
        Node* temp1=head1;
        Node* temp2=head2;
        
        while(temp1!=NULL){
            int small=0;
            if(temp2!=NULL)
            small=temp2->data;
            
            if(temp1->data<small){
                temp1->next->data-=1;
                temp1->data+=10;
            }
            
            Node* n=new Node(temp1->data-small);
            n->next=ans;
            ans=n;
            temp1=temp1->next;
            if(temp2!=NULL)
            temp2=temp2->next;
        }
        
        while(ans->next!=NULL && ans->data==0)
        ans=ans->next;
        
        return ans;
       // return NULL;
    }
};
