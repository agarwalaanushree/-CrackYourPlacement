Qn: https://leetcode.com/problems/reverse-nodes-in-k-group/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        int cnt=0;
        ListNode* curr=head;
        while(curr!=NULL){
            cnt++;
            if(cnt>=k)
            break;
            curr=curr->next;
        }

        if(cnt<k)
        return head;

        ListNode* h=head;
        ListNode* temp=head;
        for(int i=0;i<k-1;i++)
        temp=temp->next;

        ListNode* nh=temp->next;
        temp->next=NULL;

        ListNode* prev=NULL;
        ListNode* c=h;
        ListNode* next1=NULL;
        while(c!=NULL){
            next1=c->next;
            c->next=prev;
            prev=c;
            c=next1;
        }

        h->next=reverseKGroup(nh,k);
        return curr;
    }
};
