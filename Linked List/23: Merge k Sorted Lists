Qn: https://leetcode.com/problems/merge-k-sorted-lists/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* merge(ListNode* l1,ListNode* l2){
    ListNode* node=new ListNode(0);
    ListNode* temp=node;

    while(l1 && l2){
        if(l1->val<l2->val){
            temp->next=l1;
            l1=l1->next;
        }else{
            temp->next=l2;
            l2=l2->next;
        }

        temp=temp->next;
    }

    if(l1)
    temp->next=l1;
    else
    temp->next=l2;

    return node->next;
}
ListNode* mergeKListsfunc(vector<ListNode*>& lists,int st,int end){
    if(st==end)
    return lists[st];

    if(st+1==end)
    return merge(lists[st],lists[end]);

    int mid=st+(end-st)/2;
    ListNode* l= mergeKListsfunc(lists,st,mid);
    ListNode* r= mergeKListsfunc(lists,mid+1,end);

    return merge(l,r);
}

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())
        return nullptr;

        return mergeKListsfunc(lists,0,lists.size()-1);
    }
};
