Qn: https://leetcode.com/problems/reverse-linked-list-ii/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
void reverse(ListNode* start,ListNode* end){
    ListNode* prev=NULL;
    ListNode* curr=start;
    ListNode* next=end->next;

    while(curr!=next){
        ListNode* node=curr->next;
        curr->next=prev;
        prev=curr;
        curr=node;
    }
}
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head==NULL || head->next==NULL || left==right)
        return head;

        ListNode* temp=new ListNode(0);
        temp->next=head;
        ListNode* prev=temp;

        for(int i=1;i<left;i++)
        prev=prev->next;

        ListNode* start=prev->next;
        ListNode* end=start;
        for(int i=left;i<right;i++)
        end=end->next;

        ListNode* temp1=end->next;
        reverse(start,end);

        prev->next=end;
        start->next=temp1;

        return temp->next;
    }
};
